#include <Servo.h>

// Pin Definitions
const int trigPin = 12;     // Ultrasonic sensor trigger pin
const int echoPin = 13;    // Ultrasonic sensor echo pin
const int motorPin = 9;    // Motor control pin

// Changeable Settings
int MAX_Distance_CM = 20;    // Maximum distance threshold in centimeters
unsigned long PRINT_Interval_Seconds = 5;   // Print interval in seconds
int MIN_Motor_Angle = 0;   // Minimum angle for servo rotation
int MAX_Motor_Angle = 180;  // Maximum angle for servo rotation
int Motor_Rotation_Speed = 1;  // Rotation speed of the servo (degrees per step)Levels 1-3
float CM_per_Microsecond = 0.034; // Speed of sound in air (in cm per microsecond)
int Microseconds_to_CM = 2; // Conversion factor from microseconds to centimeters

// Define servo object
Servo servoMotor;

// Variables for ultrasonic sensor
long duration;
int distanceCm = MAX_Distance_CM;

// Variables for non-blocking servo rotation
unsigned long previousMillis = 0;
const long interval = 15;
int angle = MIN_Motor_Angle;
int direction = 1;

void CalculateSeconds () {
  PRINT_Interval_Seconds = PRINT_Interval_Seconds * 1000;
}

// Variables for non-blocking print
unsigned long previousPrintMillis = 0;

void setup() {
  Serial.begin(9600);    // Initialize Serial communication
  pinMode(trigPin, OUTPUT);   // Set ultrasonic sensor trigger pin as output
  pinMode(echoPin, INPUT);    // Set ultrasonic sensor echo pin as input
  servoMotor.attach(motorPin);    // Attach servo motor to motor pin
  servoMotor.write(MIN_Motor_Angle);    // Move servo to initial position (min angle)
  pinMode(motorPin, OUTPUT);   // Set motor pin as output
  CalculateSeconds();
}

void loop() {
  // Ultrasonic sensor reading
  readUltrasonicSensor();

  // Non-blocking printing
  printDistance();

  // Servo control
  controlServo();
}

void readUltrasonicSensor() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  
  duration = pulseIn(echoPin, HIGH);
  distanceCm = duration * CM_per_Microsecond / Microseconds_to_CM;
}

void printDistance() {
  unsigned long currentPrintMillis = millis();
  if (distanceCm <= MAX_Distance_CM && currentPrintMillis - previousPrintMillis >= PRINT_Interval_Seconds) {
    previousPrintMillis = currentPrintMillis;
    Serial.print("Distance: ");
    Serial.print(distanceCm);
    Serial.println(" cm ");
  }
}

void controlServo() {
  if (distanceCm <= MAX_Distance_CM) {
    if (servoMotor.attached()) {
      servoMotor.detach(); // Stop the servo motor
    }
  } else {
    if (!servoMotor.attached()) {
      servoMotor.attach(motorPin); // Attach the servo motor
    }
    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;
      angle += direction * Motor_Rotation_Speed;
      if (angle >= MAX_Motor_Angle || angle <= MIN_Motor_Angle) {
        direction = -direction;
      }
      servoMotor.write(angle);
    }
  }
}
